// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: emojifier.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace  {
  public static partial class Emojifier
  {
    static readonly string __ServiceName = "Emojifier";

    static readonly grpc::Marshaller<global::ToEmojify> __Marshaller_ToEmojify = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ToEmojify.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Emojified> __Marshaller_Emojified = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Emojified.Parser.ParseFrom);

    static readonly grpc::Method<global::ToEmojify, global::Emojified> __Method_Emojify = new grpc::Method<global::ToEmojify, global::Emojified>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Emojify",
        __Marshaller_ToEmojify,
        __Marshaller_Emojified);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::EmojifierReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Emojifier</summary>
    public abstract partial class EmojifierBase
    {
      public virtual global::System.Threading.Tasks.Task Emojify(grpc::IAsyncStreamReader<global::ToEmojify> requestStream, grpc::IServerStreamWriter<global::Emojified> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Emojifier</summary>
    public partial class EmojifierClient : grpc::ClientBase<EmojifierClient>
    {
      /// <summary>Creates a new client for Emojifier</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public EmojifierClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Emojifier that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public EmojifierClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected EmojifierClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected EmojifierClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncDuplexStreamingCall<global::ToEmojify, global::Emojified> Emojify(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Emojify(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::ToEmojify, global::Emojified> Emojify(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Emojify, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override EmojifierClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EmojifierClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(EmojifierBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Emojify, serviceImpl.Emojify).Build();
    }

  }
  public static partial class EmojiGetter
  {
    static readonly string __ServiceName = "EmojiGetter";

    static readonly grpc::Marshaller<global::ToEmojify> __Marshaller_ToEmojify = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::ToEmojify.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::WordEmoji> __Marshaller_WordEmoji = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::WordEmoji.Parser.ParseFrom);

    static readonly grpc::Method<global::ToEmojify, global::WordEmoji> __Method_Get = new grpc::Method<global::ToEmojify, global::WordEmoji>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_ToEmojify,
        __Marshaller_WordEmoji);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::EmojifierReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of EmojiGetter</summary>
    public abstract partial class EmojiGetterBase
    {
      public virtual global::System.Threading.Tasks.Task<global::WordEmoji> Get(global::ToEmojify request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for EmojiGetter</summary>
    public partial class EmojiGetterClient : grpc::ClientBase<EmojiGetterClient>
    {
      /// <summary>Creates a new client for EmojiGetter</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public EmojiGetterClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for EmojiGetter that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public EmojiGetterClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected EmojiGetterClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected EmojiGetterClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::WordEmoji Get(global::ToEmojify request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::WordEmoji Get(global::ToEmojify request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::WordEmoji> GetAsync(global::ToEmojify request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::WordEmoji> GetAsync(global::ToEmojify request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override EmojiGetterClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new EmojiGetterClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(EmojiGetterBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Get, serviceImpl.Get).Build();
    }

  }
}
#endregion
