// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: emojifier.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from emojifier.proto</summary>
public static partial class EmojifierReflection {

  #region Descriptor
  /// <summary>File descriptor for emojifier.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static EmojifierReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9lbW9qaWZpZXIucHJvdG8iKQoJVG9FbW9qaWZ5EgwKBHRleHQYASABKAkS",
          "DgoGZGVncmVlGAIgASgFIh0KCUVtb2ppZmllZBIQCghyZXNwb25zZRgBIAEo",
          "CSIoCglXb3JkRW1vamkSDAoEd29yZBgBIAEoCRINCgVlbW9qaRgCIAEoCTIy",
          "CglFbW9qaWZpZXISJQoHRW1vamlmeRIKLlRvRW1vamlmeRoKLkVtb2ppZmll",
          "ZCgBMAEyLAoLRW1vamlHZXR0ZXISHQoDR2V0EgouVG9FbW9qaWZ5GgouV29y",
          "ZEVtb2ppYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ToEmojify), global::ToEmojify.Parser, new[]{ "Text", "Degree" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Emojified), global::Emojified.Parser, new[]{ "Response" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::WordEmoji), global::WordEmoji.Parser, new[]{ "Word", "Emoji" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ToEmojify : pb::IMessage<ToEmojify> {
  private static readonly pb::MessageParser<ToEmojify> _parser = new pb::MessageParser<ToEmojify>(() => new ToEmojify());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ToEmojify> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EmojifierReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ToEmojify() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ToEmojify(ToEmojify other) : this() {
    text_ = other.text_;
    degree_ = other.degree_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ToEmojify Clone() {
    return new ToEmojify(this);
  }

  /// <summary>Field number for the "text" field.</summary>
  public const int TextFieldNumber = 1;
  private string text_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Text {
    get { return text_; }
    set {
      text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "degree" field.</summary>
  public const int DegreeFieldNumber = 2;
  private int degree_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Degree {
    get { return degree_; }
    set {
      degree_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ToEmojify);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ToEmojify other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Text != other.Text) return false;
    if (Degree != other.Degree) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Text.Length != 0) hash ^= Text.GetHashCode();
    if (Degree != 0) hash ^= Degree.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Text.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Text);
    }
    if (Degree != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Degree);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Text.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
    }
    if (Degree != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Degree);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ToEmojify other) {
    if (other == null) {
      return;
    }
    if (other.Text.Length != 0) {
      Text = other.Text;
    }
    if (other.Degree != 0) {
      Degree = other.Degree;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Text = input.ReadString();
          break;
        }
        case 16: {
          Degree = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Emojified : pb::IMessage<Emojified> {
  private static readonly pb::MessageParser<Emojified> _parser = new pb::MessageParser<Emojified>(() => new Emojified());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Emojified> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EmojifierReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Emojified() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Emojified(Emojified other) : this() {
    response_ = other.response_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Emojified Clone() {
    return new Emojified(this);
  }

  /// <summary>Field number for the "response" field.</summary>
  public const int ResponseFieldNumber = 1;
  private string response_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Response {
    get { return response_; }
    set {
      response_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Emojified);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Emojified other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Response != other.Response) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Response.Length != 0) hash ^= Response.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Response.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Response);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Response.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Response);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Emojified other) {
    if (other == null) {
      return;
    }
    if (other.Response.Length != 0) {
      Response = other.Response;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Response = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class WordEmoji : pb::IMessage<WordEmoji> {
  private static readonly pb::MessageParser<WordEmoji> _parser = new pb::MessageParser<WordEmoji>(() => new WordEmoji());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<WordEmoji> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::EmojifierReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WordEmoji() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WordEmoji(WordEmoji other) : this() {
    word_ = other.word_;
    emoji_ = other.emoji_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public WordEmoji Clone() {
    return new WordEmoji(this);
  }

  /// <summary>Field number for the "word" field.</summary>
  public const int WordFieldNumber = 1;
  private string word_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Word {
    get { return word_; }
    set {
      word_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "emoji" field.</summary>
  public const int EmojiFieldNumber = 2;
  private string emoji_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Emoji {
    get { return emoji_; }
    set {
      emoji_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as WordEmoji);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(WordEmoji other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Word != other.Word) return false;
    if (Emoji != other.Emoji) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Word.Length != 0) hash ^= Word.GetHashCode();
    if (Emoji.Length != 0) hash ^= Emoji.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Word.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Word);
    }
    if (Emoji.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Emoji);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Word.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Word);
    }
    if (Emoji.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Emoji);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(WordEmoji other) {
    if (other == null) {
      return;
    }
    if (other.Word.Length != 0) {
      Word = other.Word;
    }
    if (other.Emoji.Length != 0) {
      Emoji = other.Emoji;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Word = input.ReadString();
          break;
        }
        case 18: {
          Emoji = input.ReadString();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
